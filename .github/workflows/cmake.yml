name: CMake

on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # ─── Install HDF5 before configuring CMake ─────────────────────────────
      # Ubuntu: use apt-get
      - name: Install HDF5 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev

      # macOS: use Homebrew
      - name: Install HDF5 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install hdf5

      # Windows: use Chocolatey
      - name: Install HDF5 (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install hdf5 --confirm
          RefreshEnv

      # ─── Create build directory ────────────────────────────────────────────
      - name: Create build directory
        run: cmake -E make_directory build

      # ─── Configure CMake (Linux/macOS) ───────────────────────────────────
      - name: Configure CMake (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        working-directory: build
        run: |
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DBUILD_TESTING=ON \
            -DBUILD_H5Z_FILTER=ON

      # ─── Configure CMake (Windows) ──────────────────────────────────────
      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: build
        run: |
          cmake .. `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
            -DBUILD_TESTING=ON `
            -DBUILD_H5Z_FILTER=ON

      # ─── Build (Linux/macOS) ─────────────────────────────────────────────
      - name: Build (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        working-directory: build
        run: cmake --build . --config ${{ env.BUILD_TYPE }}

      # ─── Build (Windows) ─────────────────────────────────────────────────
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: build
        run: cmake --build . --config ${{ env.BUILD_TYPE }}

      # ─── Run Tests (Linux/macOS) ─────────────────────────────────────────
      - name: Run Tests (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        working-directory: build
        run: |
          ctest --output-on-failure -C ${{ env.BUILD_TYPE }}

      # ─── Run Tests (Windows) ──────────────────────────────────────────────
      - name: Run Tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: build
        run: |
          ctest --output-on-failure -C ${{ env.BUILD_TYPE }}