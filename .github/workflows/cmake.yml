name: Cross-Platform SZ3 Verification

on: [push]

env:
  BUILD_TYPE: Release
  TEST_URL: https://raw.githubusercontent.com/szcompressor/SZ/master/example/testdata/x86/testfloat_8_8_128.dat
  DIMS: "128 8 8"
  MODE: ABS
  TOL: 1e-3

jobs:
  build-linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.calc.outputs.digest }}
    steps:
      - uses: actions/checkout@v2

      - name: Install HDF5
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev

      - name: Create build dir
        run: cmake -E make_directory build

      - name: Configure
        shell: bash
        working-directory: build
        run: |
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DBUILD_TESTING=ON \
            -DBUILD_H5Z_FILTER=ON

      - name: Build
        shell: bash
        working-directory: build
        run: cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Run CTest
        shell: bash
        working-directory: build
        run: ctest --output-on-failure -C ${{ env.BUILD_TYPE }}

      - name: Download test data
        shell: bash
        run: |
          curl -L -o input.dat ${{ env.TEST_URL }}

      - name: Run sz3 and check error
        shell: bash
        working-directory: build
        run: |
          ./tools/sz3/sz3 -f -i ../input.dat -3 ${{ env.DIMS }} -M ${{ env.MODE }} ${{ env.TOL }} -a \
                           -o out.dat -c out.sz3 \
            | tee sz3.log
          ERR=$(grep -Po '(?<=Max absolute error = )[-0-9Ee+]+' sz3.log)
          echo "Parsed error: $ERR"
          awk "BEGIN{ if ($ERR > ${{ env.TOL }}) exit 1; }"

      - name: Compute SHA256 of compressed
        id: calc
        shell: bash
        working-directory: build
        run: |
          DIGEST=$(sha256sum out.sz3 | awk '{print $1}')
          echo "digest=$DIGEST"  
          echo "::set-output name=digest::$DIGEST"

  build-macos:
    name: Build & Test (macOS)
    runs-on: macos-latest
    outputs:
      digest: ${{ steps.calc.outputs.digest }}
    steps:
      - uses: actions/checkout@v2

      - name: Install HDF5
        run: |
          brew update
          brew install hdf5

      - name: Create build dir
        run: cmake -E make_directory build

      - name: Configure
        shell: bash
        working-directory: build
        run: |
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DBUILD_TESTING=ON \
            -DBUILD_H5Z_FILTER=ON

      - name: Build
        shell: bash
        working-directory: build
        run: cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Run CTest
        shell: bash
        working-directory: build
        run: ctest --output-on-failure -C ${{ env.BUILD_TYPE }}

      - name: Download test data
        shell: bash
        run: |
          curl -L -o input.dat ${{ env.TEST_URL }}

      - name: Run sz3 and check error
        shell: bash
        working-directory: build
        run: |
          ./tools/sz3/sz3 -f -i ../input.dat -3 ${{ env.DIMS }} -M ${{ env.MODE }} ${{ env.TOL }} -a \
                           -o out.dat -c out.sz3 \
            | tee sz3.log
          ERR=$(grep -Po '(?<=Max absolute error = )[-0-9Ee+]+' sz3.log)
          echo "Parsed error: $ERR"
          awk "BEGIN{ if ($ERR > ${{ env.TOL }}) exit 1; }"

      - name: Compute SHA256 of compressed
        id: calc
        shell: bash
        working-directory: build
        run: |
          DIGEST=$(shasum -a 256 out.sz3 | awk '{print $1}')
          echo "::set-output name=digest::$DIGEST"

#  build-windows:
#    name: Build & Test (Windows)
#    runs-on: windows-latest
#    outputs:
#      digest: ${{ steps.calc.outputs.digest }}
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Bootstrap vcpkg & install HDF5
#        shell: pwsh
#        run: |
#          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
#          cd C:\vcpkg
#          .\bootstrap-vcpkg.bat
#          .\vcpkg.exe install hdf5:x64-windows
#          echo "VCPKG_ROOT=C:\vcpkg" | Out-File -FilePath $Env:GITHUB_ENV -Encoding ASCII
#
#      - name: Create build dir
#        shell: pwsh
#        run: cmake -E make_directory build
#
#      - name: Configure
#        shell: pwsh
#        working-directory: build
#        run: |
#          cmake .. `
#            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
#            -DBUILD_TESTING=ON `
#            -DBUILD_H5Z_FILTER=ON `
#            -DCMAKE_TOOLCHAIN_FILE=$Env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake `
#            -DVCPKG_TARGET_TRIPLET=x64-windows
#
#      - name: Build
#        shell: pwsh
#        working-directory: build
#        run: cmake --build . --config ${{ env.BUILD_TYPE }}
#
#      - name: Run CTest
#        shell: pwsh
#        working-directory: build
#        run: ctest --output-on-failure -C ${{ env.BUILD_TYPE }}
#
#      - name: Download test data
#        shell: pwsh
#        run: Invoke-WebRequest -UseBasicParsing -Uri ${{ env.TEST_URL }} -OutFile input.dat
#
#      - name: Run sz3 and check error
#        shell: pwsh
#        working-directory: build
#        run: |
#          .\tools\sz3\sz3.exe -f -i ..\input.dat -3 ${{ env.DIMS }} -M ${{ env.MODE }} ${{ env.TOL }} -a `
#                              -o out.dat -c out.sz3 2>&1 | Tee-Object sz3.log
#          $err = Select-String -Pattern 'Max absolute error =\s*([0-9Ee\+\-\.]+)' -Path sz3.log |
#                 ForEach-Object { [double]($_.Matches[0].Groups[1].Value) }
#          Write-Host "Parsed error: $err"
#          if ($err -gt [double]${{ env.TOL }}) { exit 1 }
#
#      - name: Compute SHA256 of compressed
#        id: calc
#        shell: pwsh
#        working-directory: build
#        run: |
#          $h = Get-FileHash out.sz3 -Algorithm SHA256
#          echo "::set-output name=digest::$($h.Hash)"

  compare:
    name: Compare Digests
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos]
#    needs: [build-linux, build-macos, build-windows]
    steps:
      - name: Check that all three digests match
        shell: bash
        run: |
          L=${{ needs.build-linux.outputs.digest }}
          M=${{ needs.build-macos.outputs.digest }}
          W=${{ needs.build-macos.outputs.digest }}
          echo "linux: $L"
          echo "macos: $M"
          echo "windows: $W"
          if [[ "$L" != "$M" || "$L" != "$W" ]]; then
            echo "::error ::Compressed outputs differ across platforms!"
            exit 1
          fi
          echo "âœ… All compressed outputs are identical."